Document for cicd pipeline salesforce sand box

Prerequisites:
1.git version control
2.Developer IDE (vs. code)
3.sales force app connection
Objectives:
•	Deploy changes from source of truth (Git) via Source (DX) format Metadata
•	Differential delta deployments, ie. only the changes made from the last deployment to the current, not the whole repository each time
•	Ability to upgrade any environment / sandbox at any time easily, keep those sandboxes in sync
Git CICD Tool:
At a very minimum you will need a Git repository and a CI/CD automation pipeline platform.
In this we can use GitHub or GitLab.
Environments
It is very important to have a controlled set of environments that allow a repeatable progression of your changes to Production. This might look different based on your needs and team size. A good base set of environments that supports majority of teams could look like this:
Environments and Road to Production
1.	Developer Sandboxes — at least 1 per developer for building out features to avoid messing up each other’s work.
2.	QA — environment each developer’s work gets merged into and can be tested all together.
3.	UAT — a stable testing environment that developments that are ready for release are merged into. It is often a Full Sandbox where you can run testing against your production like data. This stays closely in sync with production and final testing can be done before progressing to production.
4.	Production — the sacred environment we all know.
Git branching Strategy
1.	User feature SFDC 1234 is created by the business
2.	Developer picks up feature SFDC 1234
3.	Create a feature branch from QA branch called “feature/1234-Account-Layout-Changes” — Good practice to add story numbers to branch names for tracking
4.	Modify Account Page Layout
5.	Download metadata using IDE (eg. VS Code) and commit to feature branch
6.	When changes are complete create Pull request of feature branch into DEV
7.	Reviewer approves and merges into DEV
8.	Work is tested in DEV
9.	After testing in DEV, it is working fine. Create Pull request feature branch into QA
10.	Reviewer approves and merges into QA
11.	Work is tested in QA
12.	Pull request from QA to UAT
13.	Final checks in UAT completed eg. Business is happy, all change review processes passed and ready for Production
14.	Pull request from UAT to Master
15.	Approved and merged into Master
Git Work flow
     Create Repository / Get Metadata
First you need a repository to put your metadata in
1.	Create a Git repository in Git hub
2.	Clone it locally to your machine https://github.com/username/gitrepo/branch.git
3.	Open VS Code and open the folder you cloned your repo into
4.	Using VS Code run command “SFDX: Create Project with Manifest” or in the terminal manually run “sfdx force:project:create -n MyProject — manifest”
5.	Using Org Browser you can download any metadata
6.	Commit in any metadata you want to be tracked and automatically deployed via this new pipeline


Connect git hub to org:
Our Pipelines run automatically without our intervention. This means they need a way to connect and authenticate to our Org without us interacting and entering a username/password.
To do this we use a Connected App + Certificate in our Orgs and a series of steps that allow this authentication to happen automatically.
Create Permission Set:
Connected Apps will only allow certain approved users in, we will use a Permission Set to control which users.
•	Create a permission set called “CICD”
•	Assign this to the user that will be used to deploy via
Create Connected App
The Connected App is what allows the Pipeline to Connect via
•	Setup -> Apps -> App Manager -> New Connected App
•	Connected App Name: e.g. CICD
•	Contact Email: any@email.com
•	Enable OAuth Settings
•	Callback URL: http://localhost:1717/OauthRedirect
•	Check “Use digital signatures”: upload the server.crt that was generated by OpenSSL in step above
•	OAuth scopes:
— Access and manage your data (api)
— Perform requests on your behalf at any time (refresh_token, offline_access)
— Provide access to your data via the Web (web)
•	Click Save
•	Copy the Consumer Key, you will need this later
•	Click Manage.
•	Click Edit Policies.
•	In the OAuth Policies section, select Admin approved users are pre-authorized for permitted users, and click OK.
•	Click Save.
•	Click Manage Permission Sets and assign CICD
Test the connection locally (this is similar as what Bitbucket Pipelines will run). We want to ensure it all works before trying it in Bitbucket.
Run the bellow sfdx auth command but replace with the following
•	{consumerKey} from the above connected app
•	{salesforceUsername} your deploying user’s username
•	{pathToKey} folder path to your certificate “.key” file generated in previous step
•	depending on org, you might need to update instance login url to https://login.salesforce.com
